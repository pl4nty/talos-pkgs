# References:
#   U-Boot:
#     - https://u-boot.readthedocs.io/en/latest
#   Allwinner:
#     - https://linux-sunxi.org/
#     - https://github.com/u-boot/u-boot/blob/master/board/sunxi/README.sunxi64
#   Rockchip:
#     - http://opensource.rock-chips.com
#     - https://github.com/u-boot/u-boot/blob/master/doc/board/rockchip/rockchip.rst
#     - https://u-boot.readthedocs.io/en/latest/board/rockchip/rockchip.html
#   Broadcom/RaspberryPi
#     - https://github.com/u-boot/u-boot/blob/master/doc/board/broadcom/raspberrypi.rst
name: u-boot
variant: scratch
shell: /toolchain/bin/bash
dependencies:
  - stage: base
  - stage: openssl
steps:
  # {{ if eq .ARCH "aarch64" }} This in fact is YAML comment, but Go templating instruction is evaluated by bldr restricting build to arm64 only
  - sources:
      - url: https://github.com/ARM-software/arm-trusted-firmware/archive/{{ .arm_trusted_firmware_version }}.tar.gz
        destination: arm-trusted-firmware.tar.gz
        sha256: "{{ .arm_trusted_firmware_sha256 }}"
        sha512: "{{ .arm_trusted_firmware_sha512 }}"
      - url: https://ftp.denx.de/pub/u-boot/u-boot-{{ .uboot_version }}.tar.bz2
        destination: u-boot.tar.bz2
        sha256: "{{ .uboot_sha256 }}"
        sha512: "{{ .uboot_sha512 }}"
      - url: https://ftp.denx.de/pub/u-boot/u-boot-{{ .uboot_tegra_version }}.tar.bz2
        destination: u-boot-tegra.tar.bz2
        sha256: "{{ .uboot_tegra_sha256 }}"
        sha512: "{{ .uboot_tegra_sha512 }}"
    env:
      SOURCE_DATE_EPOCH: {{ .BUILD_ARG_SOURCE_DATE_EPOCH }}
      SUN50I_A64_ARM_TRUSTED_FIRMWARE: sun50i_a64_arm-trusted-firmware
      RK3328_ARM_TRUSTED_FIRMWARE: rk3328_arm-trusted-firmware
      RK3399_ARM_TRUSTED_FIRMWARE: rk3399_arm-trusted-firmware
      RK3588_ARM_TRUSTED_FIRMWARE: rk3588_arm-trusted-firmware
      LIBRETECH_ALL_H3_CC_H5_U_BOOT: libretech_all_h3_cc_h5_u-boot
      ROCK64_RK3328_U_BOOT: rock64_rk3328_u-boot
      RPI_ARM64_GENERIC_U_BOOT: rpi_generic_u-boot
      BANANAPI_M64_U_BOOT: bananapi_m64_u-boot
      PINE64_U_BOOT: pine64_u-boot
      ROCK_PI_4_RK3399_U_BOOT: rock-pi-4-rk3399_u-boot
      ROCK_PI_4C_RK3399_U_BOOT: rock-pi-4c-rk3399_u-boot
      JETSON_NANO_U_BOOT: jetson-nano_u-boot
      NANOPI_R4S_U_BOOT: nanopi-r4s_u-boot
      TURING_RK1_RK3588_U_BOOT: turing-rk1-rk3588_u-boot
    prepare:
      - |
        mkdir -p /usr/bin
        ln -sf /toolchain/bin/env /usr/bin/env
        ln -sf /toolchain/bin/python3 /toolchain/bin/python
        pip3 install pyelftools
      # sun50i_a64
      - |
        mkdir ${SUN50I_A64_ARM_TRUSTED_FIRMWARE}
        tar -xzf arm-trusted-firmware.tar.gz --strip-components=1 -C ${SUN50I_A64_ARM_TRUSTED_FIRMWARE}
      # rk3328
      - |
        mkdir ${RK3328_ARM_TRUSTED_FIRMWARE}
        tar -xzf arm-trusted-firmware.tar.gz --strip-components=1 -C ${RK3328_ARM_TRUSTED_FIRMWARE}
      # rk3399
      - |
        mkdir ${RK3399_ARM_TRUSTED_FIRMWARE}
        tar -xzf arm-trusted-firmware.tar.gz --strip-components=1 -C ${RK3399_ARM_TRUSTED_FIRMWARE}
        cd ${RK3399_ARM_TRUSTED_FIRMWARE}
        patch -p0 < /pkg/rockpi4/patches/platform.mk.patch
      # rk3588
      - |
        mkdir ${RK3588_ARM_TRUSTED_FIRMWARE}
        tar -xzf arm-trusted-firmware.tar.gz --strip-components=1 -C ${RK3588_ARM_TRUSTED_FIRMWARE}
        cd ${RK3588_ARM_TRUSTED_FIRMWARE}
        # https://review.trustedfirmware.org/c/TF-A/trusted-firmware-a/+/21840/6 and related chain
        for patch in $(find /pkg/turing_rk1/arm-trusted-firmware-patches -type f -name "*.patch" | sort); do
          patch -p1 < $patch || (echo "Failed to apply patch $patch" && exit 1)
        done
      # libretech_all_h3_cc_h5
      - |
        mkdir ${LIBRETECH_ALL_H3_CC_H5_U_BOOT}
        tar -xjf u-boot.tar.bz2 --strip-components=1 -C ${LIBRETECH_ALL_H3_CC_H5_U_BOOT}
        cd ${LIBRETECH_ALL_H3_CC_H5_U_BOOT}
        make libretech_all_h3_cc_h5_defconfig
        sed -i "s/CONFIG_TOOLS_LIBCRYPTO=y/# CONFIG_TOOLS_LIBCRYPTO is not set/" .config
      # rock64-rk3328
      - |
        mkdir ${ROCK64_RK3328_U_BOOT}
        tar -xjf u-boot.tar.bz2 --strip-components=1 -C ${ROCK64_RK3328_U_BOOT}
        cd ${ROCK64_RK3328_U_BOOT}
        make rock64-rk3328_defconfig
        sed -i "s/CONFIG_TOOLS_LIBCRYPTO=y/# CONFIG_TOOLS_LIBCRYPTO is not set/" .config
      # rpi_generic (built with rpi_arm64_defconfig, which "uses the device-tree provided by the firmware")
      - |
        mkdir ${RPI_ARM64_GENERIC_U_BOOT}
        tar -xjf u-boot.tar.bz2 --strip-components=1 -C ${RPI_ARM64_GENERIC_U_BOOT}
        cd ${RPI_ARM64_GENERIC_U_BOOT}
        patch -p1 < /pkg/rpi_arm64/0003-Revert-nvme-Correct-the-prps-per-page-calculation-me.patch
        patch -p1 < /pkg/rpi_arm64/0004-usb-xhci-brcm-Make-driver-compatible-with-downstream.patch
        patch -p1 < /pkg/rpi_arm64/0005-nvme-improve-readability-of-nvme_setup_prps.patch
        patch -p1 < /pkg/rpi_arm64/0006-nvme-Use-pointer-for-CPU-addressed-buffers.patch
        patch -p1 < /pkg/rpi_arm64/0007-nvme-translate-virtual-addresses-into-the-bus-s-addr.patch
        patch -p1 < /pkg/rpi_arm64/0008-enable-nvme-and-fixup-efi-boot.patch
        make rpi_arm64_defconfig
        sed -i "s/CONFIG_TOOLS_LIBCRYPTO=y/# CONFIG_TOOLS_LIBCRYPTO is not set/" .config
      # bananapi_m64
      - |
        mkdir ${BANANAPI_M64_U_BOOT}
        tar -xjf u-boot.tar.bz2 --strip-components=1 -C ${BANANAPI_M64_U_BOOT}
        cd ${BANANAPI_M64_U_BOOT}
        make bananapi_m64_defconfig
        sed -i "s/CONFIG_TOOLS_LIBCRYPTO=y/# CONFIG_TOOLS_LIBCRYPTO is not set/" .config
      # pine64
      - |
        mkdir ${PINE64_U_BOOT}
        tar -xjf u-boot.tar.bz2 --strip-components=1 -C ${PINE64_U_BOOT}
        cd ${PINE64_U_BOOT}
        make pine64_plus_defconfig
        sed -i "s/CONFIG_TOOLS_LIBCRYPTO=y/# CONFIG_TOOLS_LIBCRYPTO is not set/" .config
      # rock-pi-4-rk3399
      - |
        mkdir ${ROCK_PI_4_RK3399_U_BOOT}
        tar -xjf u-boot.tar.bz2 --strip-components=1 -C ${ROCK_PI_4_RK3399_U_BOOT}
        cd ${ROCK_PI_4_RK3399_U_BOOT}
        patch -p0 < /pkg/rockpi4/patches/board-rock-pi-4-enable-spi-flash.patch
        make rock-pi-4-rk3399_defconfig
      # rock-pi-4c-rk3399
      - |
        mkdir ${ROCK_PI_4C_RK3399_U_BOOT}
        tar -xjf u-boot.tar.bz2 --strip-components=1 -C ${ROCK_PI_4C_RK3399_U_BOOT}
        cd ${ROCK_PI_4C_RK3399_U_BOOT}
        patch -p0 < /pkg/rockpi4/patches/board-rock-pi-4-enable-spi-flash.patch
        make rock-pi-4c-rk3399_defconfig
      # jetson nano
      - |
        mkdir ${JETSON_NANO_U_BOOT}
        tar -xjf u-boot-tegra.tar.bz2 --strip-components=1 -C ${JETSON_NANO_U_BOOT}
        cd ${JETSON_NANO_U_BOOT}
        patch -p0 < /pkg/jetson_nano/patches/tegra.patch
        make p3450-0000_defconfig
        sed -i "s/CONFIG_TOOLS_LIBCRYPTO=y/# CONFIG_TOOLS_LIBCRYPTO is not set/" .config
      # nanopi-r4s
      - |
        mkdir ${NANOPI_R4S_U_BOOT}
        tar -xjf u-boot.tar.bz2 --strip-components=1 -C ${NANOPI_R4S_U_BOOT}
        cd ${NANOPI_R4S_U_BOOT}
        make nanopi-r4s-rk3399_defconfig
        sed -i "s/CONFIG_TOOLS_LIBCRYPTO=y/# CONFIG_TOOLS_LIBCRYPTO is not set/" .config
      # turing_rk1-rk3588
      - |
        mkdir ${TURING_RK1_RK3588_U_BOOT}
        tar -xjf u-boot.tar.bz2 --strip-components=1 -C ${TURING_RK1_RK3588_U_BOOT}
        cd ${TURING_RK1_RK3588_U_BOOT}
        # not upstreamed yet
        for patch in $(find /pkg/turing_rk1/patches -type f -name "*.patch" | sort); do
          patch -p1 < $patch || (echo "Failed to apply patch $patch" && exit 1)
        done
        make turing-rk1-rk3588_defconfig
    build:
      # sun50i_a64
      - |
        cd ${SUN50I_A64_ARM_TRUSTED_FIRMWARE}
        make realclean
        # https://salsa.debian.org/debian/arm-trusted-firmware/-/commit/6424a59e08585af7f8a56f1e16ecc6a6b9e4ad7a
        # https://salsa.debian.org/debian/arm-trusted-firmware/-/commit/6ed8f61df3b07bb22a68a0fc189ec3b3f7b00dbd
        # https://developer.trustedfirmware.org/T996
        TF_LDFLAGS=--no-warn-rwx-segments CFLAGS=--param=min-pagesize=0 make -j PLAT=sun50i_a64 DEBUG=0 bl31
      # rk3328
      - |
        cd ${RK3328_ARM_TRUSTED_FIRMWARE}
        make realclean
        # https://salsa.debian.org/debian/arm-trusted-firmware/-/commit/6424a59e08585af7f8a56f1e16ecc6a6b9e4ad7a
        # https://salsa.debian.org/debian/arm-trusted-firmware/-/commit/6ed8f61df3b07bb22a68a0fc189ec3b3f7b00dbd
        # https://developer.trustedfirmware.org/T996
        TF_LDFLAGS=--no-warn-rwx-segments CFLAGS=--param=min-pagesize=0 make -j $(nproc) PLAT=rk3328 DEBUG=0 bl31
      # rk3399
      - |
        cd ${RK3399_ARM_TRUSTED_FIRMWARE}
        make realclean
        mkdir -p $(pwd)/build/rk3399/release/
        cp -rf /pkg/rockpi4/m0 $(pwd)/build/rk3399/release/
        # https://salsa.debian.org/debian/arm-trusted-firmware/-/commit/6424a59e08585af7f8a56f1e16ecc6a6b9e4ad7a
        # https://salsa.debian.org/debian/arm-trusted-firmware/-/commit/6ed8f61df3b07bb22a68a0fc189ec3b3f7b00dbd
        # https://developer.trustedfirmware.org/T996
        TF_LDFLAGS=--no-warn-rwx-segments CFLAGS=--param=min-pagesize=0 make -j $(nproc) PLAT=rk3399 DEBUG=0 bl31
      # rk3588
      - |
        cd ${RK3588_ARM_TRUSTED_FIRMWARE}
        make realclean
        TF_LDFLAGS=--no-warn-rwx-segments CFLAGS=--param=min-pagesize=0 make -j $(nproc) PLAT=rk3588 DEBUG=0 bl31
        mkdir -p ${RK3588_ARM_TRUSTED_FIRMWARE}/build/rk3588/release/
        cp -f /pkg/turing_rk1/rkbin/*.bin build/rk3588/release/
      # libretech_all_h3_cc_h5
      - |
        export BL31=$(pwd)/${SUN50I_A64_ARM_TRUSTED_FIRMWARE}/build/sun50i_a64/release/bl31.bin
        export SCP=/dev/null
        cd ${LIBRETECH_ALL_H3_CC_H5_U_BOOT}
        make -j $(nproc) HOSTLDLIBS_mkimage="-lssl -lcrypto"
      # rock64-rk3328
      - |
        export BL31=$(pwd)/${RK3328_ARM_TRUSTED_FIRMWARE}/build/rk3328/release/bl31/bl31.elf
        cd ${ROCK64_RK3328_U_BOOT}
        make -j $(nproc) HOSTLDLIBS_mkimage="-lssl -lcrypto"
      # rpi_generic
      - |
        cd ${RPI_ARM64_GENERIC_U_BOOT}
        make -j $(nproc) HOSTLDLIBS_mkimage="-lssl -lcrypto"
      # bananapi_m64
      - |
        export BL31=$(pwd)/${SUN50I_A64_ARM_TRUSTED_FIRMWARE}/build/sun50i_a64/release/bl31.bin
        export SCP=/dev/null
        cd ${BANANAPI_M64_U_BOOT}
        make -j $(nproc) HOSTLDLIBS_mkimage="-lssl -lcrypto"
      # pine64
      - |
        export BL31=$(pwd)/${SUN50I_A64_ARM_TRUSTED_FIRMWARE}/build/sun50i_a64/release/bl31.bin
        export SCP=/dev/null
        cd ${PINE64_U_BOOT}
        make -j $(nproc) HOSTLDLIBS_mkimage="-lssl -lcrypto"
      # rock-pi-4-rk3399
      - |
        export BL31=$(pwd)/${RK3399_ARM_TRUSTED_FIRMWARE}/build/rk3399/release/bl31/bl31.elf
        cd ${ROCK_PI_4_RK3399_U_BOOT}
        make -j $(nproc) HOSTLDLIBS_mkimage="-lssl -lcrypto"

        # create spi image
        # https://github.com/armbian/build/blob/09e416e31cc01ece4533a65f02a470a4c21b90ea/config/sources/families/include/rockchip64_common.inc#L173-L178
        tools/mkimage -n rk3399 -T rkspi -d tpl/u-boot-tpl.bin:spl/u-boot-spl.bin rkspi_tpl_spl.img
        dd if=/dev/zero of=rkspi_loader.img count=8128 status=none
        dd if=rkspi_tpl_spl.img of=rkspi_loader.img conv=notrunc status=none
        dd if=u-boot.itb of=rkspi_loader.img seek=768 conv=notrunc status=none
       # rock-pi-4c-rk3399
      - |
        export BL31=$(pwd)/${RK3399_ARM_TRUSTED_FIRMWARE}/build/rk3399/release/bl31/bl31.elf
        cd ${ROCK_PI_4C_RK3399_U_BOOT}
        make -j $(nproc) HOSTLDLIBS_mkimage="-lssl -lcrypto"

        # create spi image
        # https://github.com/armbian/build/blob/09e416e31cc01ece4533a65f02a470a4c21b90ea/config/sources/families/include/rockchip64_common.inc#L173-L178
        tools/mkimage -n rk3399 -T rkspi -d tpl/u-boot-tpl.bin:spl/u-boot-spl.bin rkspi_tpl_spl.img
        dd if=/dev/zero of=rkspi_loader.img count=8128 status=none
        dd if=rkspi_tpl_spl.img of=rkspi_loader.img conv=notrunc status=none
        dd if=u-boot.itb of=rkspi_loader.img seek=768 conv=notrunc status=none
      # jetson nano
      - |
        cd ${JETSON_NANO_U_BOOT}
        make -j $(nproc) HOSTLDLIBS_mkimage="-lssl -lcrypto"
      # nanopi-r4s
      - |
        export BL31=$(pwd)/${RK3399_ARM_TRUSTED_FIRMWARE}/build/rk3399/release/bl31/bl31.elf
        cd ${NANOPI_R4S_U_BOOT}
        make -j $(nproc) HOSTLDLIBS_mkimage="-lssl -lcrypto"
      # turing_rk1-rk3588
      - |
        export BL31=$(pwd)/${RK3588_ARM_TRUSTED_FIRMWARE}/build/rk3588/release/bl31/bl31.elf
        export ROCKCHIP_TPL=$(pwd)/${RK3588_ARM_TRUSTED_FIRMWARE}/build/rk3588/release/rk3588_ddr_lp4_2112MHz_lp5_2736MHz_v1.12_patched.bin
        cd ${TURING_RK1_RK3588_U_BOOT}
        make -j $(nproc) HOSTLDLIBS_mkimage="-lssl -lcrypto"
    install:
      # libretech_all_h3_cc_h5
      - |
        mkdir -p /rootfs/libretech_all_h3_cc_h5
        cp -v ${LIBRETECH_ALL_H3_CC_H5_U_BOOT}/u-boot-sunxi-with-spl.bin /rootfs/libretech_all_h3_cc_h5
      # rock64-rk3328
      - |
        mkdir -p /rootfs/rock64
        cp -v ${ROCK64_RK3328_U_BOOT}/u-boot-rockchip.bin /rootfs/rock64
      # rpi_generic
      - |
        mkdir -p /rootfs/rpi_generic
        cp -v ${RPI_ARM64_GENERIC_U_BOOT}/u-boot.bin /rootfs/rpi_generic/u-boot.bin
      # bananapi_m64
      - |
        mkdir -p /rootfs/bananapi_m64
        cp -v ${BANANAPI_M64_U_BOOT}/u-boot-sunxi-with-spl.bin /rootfs/bananapi_m64
      # pine64
      - |
        mkdir -p /rootfs/pine64
        cp -v ${PINE64_U_BOOT}/u-boot-sunxi-with-spl.bin /rootfs/pine64
      # rock-pi-4-rk3399
      - |
        mkdir -p /rootfs/rockpi_4
        cp -v ${ROCK_PI_4_RK3399_U_BOOT}/u-boot-rockchip.bin /rootfs/rockpi_4

        # cp spi image
        cp -v ${ROCK_PI_4_RK3399_U_BOOT}/rkspi_loader.img /rootfs/rockpi_4
      # rock-pi-4c-rk3399
      - |
        mkdir -p /rootfs/rockpi_4c
        cp -v ${ROCK_PI_4C_RK3399_U_BOOT}/u-boot-rockchip.bin /rootfs/rockpi_4c

        # cp spi image
        cp -v ${ROCK_PI_4C_RK3399_U_BOOT}/rkspi_loader.img /rootfs/rockpi_4c
      # jetson nano
      - |
        mkdir -p /rootfs/jetson_nano
        cp -v ${JETSON_NANO_U_BOOT}/u-boot.bin /rootfs/jetson_nano
      # nanopi-r4s
      - |
        mkdir -p /rootfs/nanopi_r4s
        cp -v ${NANOPI_R4S_U_BOOT}/u-boot-rockchip.bin /rootfs/nanopi_r4s
      # turing-rk1-rk3588
      - |
        mkdir -p /rootfs/turing_rk1
        cp -v ${TURING_RK1_RK3588_U_BOOT}/u-boot-rockchip.bin /rootfs/turing_rk1

        # cp spi image
        cp -v ${TURING_RK1_RK3588_U_BOOT}/u-boot-rockchip-spi.bin /rootfs/turing_rk1
  # {{ else }}
  - install:
      - |
        mkdir -p /rootfs
# {{ end }}
finalize:
  - from: /rootfs
    to: /
